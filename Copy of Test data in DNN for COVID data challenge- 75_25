{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Test data in DNN for COVID data challenge- 75/25","provenance":[{"file_id":"1vogoEMFuSYq2C8gvpjvAtQ3iWpEmOnSV","timestamp":1624965240115},{"file_id":"1ss56xdZMDps9JS8CMupsDd-AcQJfJS5m","timestamp":1624733142344},{"file_id":"1FK4BygLzGZ8GbZtFXMb82jKExh7wejVW","timestamp":1624389924096},{"file_id":"1mUbdL-eQxKL7j0kwO71SMDHQ4G-McF-2","timestamp":1624306193284},{"file_id":"1O6-q_y6kg2GVj39Wbwd406779I5d9rP9","timestamp":1622034216099},{"file_id":"1VNURE42ebNlJbplg2D7QTZScuHh8uryq","timestamp":1622034204821}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"JxWBGlsgo1Cg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624973742101,"user_tz":240,"elapsed":143,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"b009da57-e4e6-4086-9590-0acf0ab3f61e"},"source":["import pandas as pd\n","from google.colab import files, drive\n","# libraries for cleaning\n","import re\n","import nltk\n","nltk.download(\"stopwords\") # helps us get rid of stop words\n","from nltk.corpus import stopwords\n","from nltk.stem.porter import PorterStemmer"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cTRPkTiRwglN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624973742955,"user_tz":240,"elapsed":704,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"234de8dd-4fbb-42cf-809b-d764bfdea637"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","data = pd.read_csv(\"/content/drive/MyDrive/UBDC_2021/Final/text_preprocessed.csv\")\n","data = data.loc[:,[\"text\",\"label\"]]\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AOjBQ-BRU9YM"},"source":["import numpy as np\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XSrG-UaWWuMu","colab":{"base_uri":"https://localhost:8080/","height":110},"executionInfo":{"status":"ok","timestamp":1624973742961,"user_tz":240,"elapsed":34,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"34bbe0fd-7ff3-4196-9938-29d44959a235"},"source":["data[:2]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>coronavirus outbreak live updates  odisha conf...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>for today  may    here s how to follow the lat...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                text  label\n","0  coronavirus outbreak live updates  odisha conf...      0\n","1  for today  may    here s how to follow the lat...      0"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"WtdrpTssYWiR"},"source":["#vectorization\n","import numpy as np\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","x = data['text']\n","y = data['label']\n","X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.25, random_state=0)\n","X_train, X_val, Y_train, Y_val = train_test_split(X_train,Y_train, test_size=0.25, random_state=0)\n","\n","vectorizer = CountVectorizer(stop_words=stopwords.words(\"english\"))\n","vectorizer.fit(X_train)\n","X_train = vectorizer.transform(X_train)\n","X_test  = vectorizer.transform(X_test)\n","X_val = vectorizer.transform(X_val)\n","\n","Y_train = np.array(Y_train)\n","Y_test = np.array(Y_test)\n","Y_val = np.array(Y_val)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SGUD1f6tYcb9"},"source":["from keras.models import Sequential\n","from keras import layers\n","from keras.layers import Dropout, Dense, GRU, Embedding\n","from sklearn import metrics\n","from sklearn import preprocessing \n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","\n","model = Sequential()\n","node = 128 # number of nodes\n","nLayers = 2 # number of  hidden layer\n","shape = X_train.shape[1] \n","dropout = 0.5\n","nClasses = 2\n","model.add(Dense(node,input_dim=shape,activation='relu'))\n","model.add(Dropout(dropout))\n","for i in range(0,nLayers):\n","    model.add(Dense(node,input_dim=node,activation='relu'))\n","    model.add(Dropout(dropout))\n","model.add(Dense(nClasses, activation='softmax'))\n","model.compile(loss='sparse_categorical_crossentropy',\n","                  optimizer='adam',\n","                  metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PriR6AHQtNrG","executionInfo":{"status":"ok","timestamp":1624975432188,"user_tz":240,"elapsed":1677774,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"df0b255d-e2bd-4d50-a465-73245748de79"},"source":["\n","history = model.fit(X_train, Y_train,\n","                          validation_data=(X_val, Y_val),\n","                          epochs=3,\n","                          batch_size=32,\n","                          verbose=2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/indexed_slices.py:449: UserWarning: Converting sparse IndexedSlices(IndexedSlices(indices=Tensor(\"gradient_tape/sequential/dense/embedding_lookup_sparse/Reshape_1:0\", shape=(None,), dtype=int32), values=Tensor(\"gradient_tape/sequential/dense/embedding_lookup_sparse/Reshape:0\", shape=(None, 128), dtype=float32), dense_shape=Tensor(\"gradient_tape/sequential/dense/embedding_lookup_sparse/Cast:0\", shape=(2,), dtype=int32))) to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"shape. This may consume a large amount of memory.\" % value)\n"],"name":"stderr"},{"output_type":"stream","text":["3893/3893 - 555s - loss: 0.0908 - accuracy: 0.9774 - val_loss: 0.0621 - val_accuracy: 0.9841\n","Epoch 2/3\n","3893/3893 - 539s - loss: 0.0400 - accuracy: 0.9893 - val_loss: 0.0705 - val_accuracy: 0.9861\n","Epoch 3/3\n","3893/3893 - 539s - loss: 0.0184 - accuracy: 0.9951 - val_loss: 0.0806 - val_accuracy: 0.9867\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QKyAaaNk1pKH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624975442384,"user_tz":240,"elapsed":10230,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"27c11057-11ae-4c99-ea0a-7ee9dfffc618"},"source":["loss, accuracy = model.evaluate(X_train, Y_train, verbose=False)\n","print(\"Training Accuracy: {:.4f}\".format(accuracy))\n","loss, accuracy = model.evaluate(X_test, Y_test, verbose=False)\n","print(\"Testing Accuracy:  {:.4f}\".format(accuracy))\n","predictions = model.predict(X_test)\n","matrix = metrics.confusion_matrix(Y_test, predictions.argmax(axis=1))\n","print(matrix)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training Accuracy: 0.9987\n","Testing Accuracy:  0.9864\n","[[52661    89]\n"," [  664  1952]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-vHF2khg69rV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624975445193,"user_tz":240,"elapsed":2855,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"3941c920-c1bf-4be1-eccc-e7b540dafe3e"},"source":["model.summary()\n","predicted = model.predict(X_test)\n","print(metrics.classification_report (Y_test, np.argmax(predicted, axis = 1)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 128)               14015232  \n","_________________________________________________________________\n","dropout (Dropout)            (None, 128)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 128)               16512     \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 128)               16512     \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 258       \n","=================================================================\n","Total params: 14,048,514\n","Trainable params: 14,048,514\n","Non-trainable params: 0\n","_________________________________________________________________\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      0.99     52750\n","           1       0.96      0.75      0.84      2616\n","\n","    accuracy                           0.99     55366\n","   macro avg       0.97      0.87      0.92     55366\n","weighted avg       0.99      0.99      0.99     55366\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mn3maFOApSV9"},"source":["Results: Kaggle dataset with the trained DNN model\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sd7mRlA_pRIl","executionInfo":{"status":"ok","timestamp":1624975445631,"user_tz":240,"elapsed":449,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"6eccf9a1-345e-4e85-d481-e6893340bcf8"},"source":["import pandas as pd\n","from google.colab import files, drive\n","\n","\n","test_final = pd.read_csv(\"/content/drive/MyDrive/UBDC_2021/Final/english_test_with_labels.csv\")\n","test_final = test_final.iloc[:,1:]\n","print(test_final.head())\n","label_change = lambda x: 1 if x == \"fake\" else 0\n","y = test_final.iloc[:,1]\n","test_final.iloc[:,1] = y.map(label_change)\n","print(test_final.head())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                                               tweet label\n","0  Our daily update is published. States reported...  real\n","1             Alfalfa is the only cure for COVID-19.  fake\n","2  President Trump Asked What He Would Do If He W...  fake\n","3  States reported 630 deaths. We are still seein...  real\n","4  This is the sixth time a global health emergen...  real\n","                                               tweet  label\n","0  Our daily update is published. States reported...      0\n","1             Alfalfa is the only cure for COVID-19.      1\n","2  President Trump Asked What He Would Do If He W...      1\n","3  States reported 630 deaths. We are still seein...      0\n","4  This is the sixth time a global health emergen...      0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NU1L6lVQpn4p"},"source":["import re\n","\n","def cleaning_words2(phrase):\n","  tweet = re.sub(r\"http\\S+\", \"\", phrase) # remove all URLs\n","  tweet = re.sub('[^a-zA-z]',' ',tweet) # remove punctuation\n","  tweet = re.sub(r'@\\S+|https?://\\S+','', tweet) # remove @ sign\n","  tweet = tweet.lower() # make all letters lower case\n","  #tweet = tweet.split() # make a list of the words\n","\n","  # now will stem words \n","  # ps = PorterStemmer()\n","  # all_stopwords = stopwords.words(\"english\")\n","  # all_stopwords.remove(\"not\") # make sure we don't remove the word \"not\" since that changes the meaning of the sentence\n","  # tweet = [ps.stem(t) for t in tweet if not t in set(all_stopwords)]\n","  # tweet = \" \".join(tweet) # join the words back together\n","  cleaned_words = []\n","  cleaned_words.append(tweet)\n","  return tweet"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H2y-mXbypsAn","executionInfo":{"status":"ok","timestamp":1624976575512,"user_tz":240,"elapsed":148,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"f897e4f9-0cb1-494e-fcff-d1c4fd369aab"},"source":["X_test_final = test_final.iloc[:,0]\n","y_test_final = test_final.iloc[:,1]\n","print(X_test_final[:3])\n","print(y_test_final[:3])\n","\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","# clean & transform\n","X_test_final = X_test_final.map(cleaning_words2)\n","X_test_final = vectorizer.transform(X_test_final)\n","X_test_final = X_test_final"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0    Our daily update is published. States reported...\n","1               Alfalfa is the only cure for COVID-19.\n","2    President Trump Asked What He Would Do If He W...\n","Name: tweet, dtype: object\n","0    0\n","1    1\n","2    1\n","Name: label, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MpXqKAZ4pxoN"},"source":["#DNN test results\n","y_test_final_pred = model.predict(X_test_final)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k1FvvmY8J4iI","executionInfo":{"status":"ok","timestamp":1624976631990,"user_tz":240,"elapsed":150,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"b806e817-89e0-472f-c981-7e05c1e6f8ce"},"source":["print(y_test_final_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[9.99790132e-01 2.09910926e-04]\n"," [9.85920072e-01 1.40800085e-02]\n"," [9.93280590e-01 6.71944954e-03]\n"," ...\n"," [1.00000000e+00 5.78155257e-09]\n"," [9.99999285e-01 7.27408008e-07]\n"," [1.00000000e+00 2.40698235e-08]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VW4qR9bkJ4--","executionInfo":{"status":"ok","timestamp":1624976833355,"user_tz":240,"elapsed":172,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"7a85c490-4010-4c46-b94a-d04d2368324f"},"source":["print(classification_report(y_test_final, np.argmax(y_test_final_pred, axis = 1)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.54      1.00      0.70      1120\n","           1       0.99      0.08      0.15      1020\n","\n","    accuracy                           0.56      2140\n","   macro avg       0.77      0.54      0.43      2140\n","weighted avg       0.76      0.56      0.44      2140\n","\n"],"name":"stdout"}]}]}