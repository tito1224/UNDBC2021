{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Test data in KNN, SVM, and Random Forest challenge - 75/25","provenance":[{"file_id":"1N3dM0SN3lAQ9MW9ST4byHwdRxJSW9BWM","timestamp":1624965263459},{"file_id":"1Hi8jMqyRmND-AM63xHU5mR6wM3zOCmlp","timestamp":1624774511184},{"file_id":"19ArlwZv9y1M5ba3EW0urAiOtVsZHcps_","timestamp":1624389993571},{"file_id":"1uUee0LBj0Tt_G0gQQM7etZgIK43KD7dN","timestamp":1624311004258}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"joNuV0mVuDCX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625346004985,"user_tz":240,"elapsed":1316,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"cbcdcaae-deed-4d4d-adce-a24d43ddb4d0"},"source":["import pandas as pd\n","from google.colab import files, drive\n","\n","# libraries for cleaning\n","import re\n","import nltk\n","nltk.download(\"stopwords\") # helps us get rid of stop words\n","from nltk.corpus import stopwords\n","from nltk.stem.porter import PorterStemmer"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dJCIFpCEu3T-","executionInfo":{"status":"ok","timestamp":1625346006261,"user_tz":240,"elapsed":1286,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"df9c2424-cc57-4628-d640-2cb2a5c6626e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","data = pd.read_csv(\"/content/drive/MyDrive/UBDC_2021/Final/text_preprocessed.csv\")\n","data = data.loc[:,[\"text\",\"label\"]]\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YTZsq47zu-OQ","colab":{"base_uri":"https://localhost:8080/","height":417},"executionInfo":{"status":"ok","timestamp":1625346006267,"user_tz":240,"elapsed":15,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"b722a9bd-2ee9-41c8-8603-92c32eb85978"},"source":["import numpy as np\n","\n","data.dropna()\n","\n"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>coronavirus outbreak live updates  odisha conf...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>for today  may    here s how to follow the lat...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>coronavirus outbreak  round the clock updates ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>watch live  gov  phil murphy will speak at   p...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>to all my friends in the people s republic of ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>221456</th>\n","      <td>angelwarrior    it was created in wuhan lab a...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>221457</th>\n","      <td>mmentoauderese  me too   i also think the dem...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>221458</th>\n","      <td>angelwarrior    who did not already think that</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>221459</th>\n","      <td>angelwarrior    i don t see the logic of rele...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>221460</th>\n","      <td>angelwarrior    i m actually amazed that this...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>221461 rows Ã— 2 columns</p>\n","</div>"],"text/plain":["                                                     text  label\n","0       coronavirus outbreak live updates  odisha conf...      0\n","1       for today  may    here s how to follow the lat...      0\n","2       coronavirus outbreak  round the clock updates ...      0\n","3       watch live  gov  phil murphy will speak at   p...      0\n","4       to all my friends in the people s republic of ...      0\n","...                                                   ...    ...\n","221456   angelwarrior    it was created in wuhan lab a...      1\n","221457   mmentoauderese  me too   i also think the dem...      1\n","221458     angelwarrior    who did not already think that      1\n","221459   angelwarrior    i don t see the logic of rele...      1\n","221460   angelwarrior    i m actually amazed that this...      1\n","\n","[221461 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"j6zQQa4Du-zs","colab":{"base_uri":"https://localhost:8080/","height":110},"executionInfo":{"status":"ok","timestamp":1625346006269,"user_tz":240,"elapsed":13,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"7caa895c-8d0d-4a69-d72c-3ee2cbb12990"},"source":["data[:2]\n"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>coronavirus outbreak live updates  odisha conf...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>for today  may    here s how to follow the lat...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                text  label\n","0  coronavirus outbreak live updates  odisha conf...      0\n","1  for today  may    here s how to follow the lat...      0"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"z7Z3GOfLvCqW","executionInfo":{"status":"ok","timestamp":1625346018160,"user_tz":240,"elapsed":11902,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}}},"source":["#vectorization\n","import numpy as np\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","x = data['text']\n","y = data['label']\n","x_train, x_test = train_test_split(x, test_size=0.25, random_state=0)\n","Y_train, Y_test = train_test_split(y, test_size=0.25, random_state=0)\n","\n","vectorizer = CountVectorizer(stop_words = stopwords.words(\"english\"))\n","vectorizer.fit(x_train)\n","X_train = vectorizer.transform(x_train)\n","X_test  = vectorizer.transform(x_test)\n","\n","Y_train = np.array(Y_train)\n","Y_test = np.array(Y_test)\n","feature_names = vectorizer.get_feature_names()"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"m7jdxz0TvHm3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625346165504,"user_tz":240,"elapsed":147348,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"cbd00c00-5120-490f-b72f-d497c73daa57"},"source":["#KNN classifier\n","\n","from sklearn.neighbors import KNeighborsClassifier\n","model = KNeighborsClassifier(n_neighbors=2)\n","model.fit(X_train, Y_train) \n","model_predictions = model.predict(X_test)\n","print(\"\\n---------KNN classifier---------\")\n","print(\"\\nConfusion matrix: \\n\", confusion_matrix(Y_test,model_predictions))\n","print(\"\\nClassification Report: \\n\", classification_report(Y_test,model_predictions))\n","print(\"\\nClassification accuracy: \" ,accuracy_score(Y_test, model_predictions) * 100, \"%.\\n\")\n","#results.append(accuracy_score(Y_test, model_predictions))\n","#models.append('KNN')"],"execution_count":6,"outputs":[{"output_type":"stream","text":["\n","---------KNN classifier---------\n","\n","Confusion matrix: \n"," [[52605   145]\n"," [  964  1652]]\n","\n","Classification Report: \n","               precision    recall  f1-score   support\n","\n","           0       0.98      1.00      0.99     52750\n","           1       0.92      0.63      0.75      2616\n","\n","    accuracy                           0.98     55366\n","   macro avg       0.95      0.81      0.87     55366\n","weighted avg       0.98      0.98      0.98     55366\n","\n","\n","Classification accuracy:  97.99696564678683 %.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"18bOc1BSGrPE"},"source":["This 0.71 f1-score is because imbalances in classes. Accuracy and f1-score difference in values is because of imbalance in class = General trend in all models. One way to improve is to create balance by sampling."]},{"cell_type":"code","metadata":{"id":"8PExuKAprJfb","executionInfo":{"status":"ok","timestamp":1625346165505,"user_tz":240,"elapsed":19,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}}},"source":["import matplotlib.pyplot as plt"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"FDSO9FVwl5Yy","executionInfo":{"status":"ok","timestamp":1625346946604,"user_tz":240,"elapsed":781116,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"050d1ad0-fc47-4f65-f830-e106835250df"},"source":["from sklearn.ensemble import RandomForestClassifier\n","model_oob = RandomForestClassifier(warm_start=True, oob_score = True, \n","                                   max_features = \"sqrt\", random_state= 0)\n","min_est = 15\n","max_est = 75\n","err_rate = []\n","\n","for i in range(min_est, max_est+1):\n","  model_oob.set_params(n_estimators = i)\n","  model_oob.fit(X_train, Y_train)\n","\n","  oob_err = 1- model_oob.oob_score_\n","  err_rate.append((i,oob_err))\n","\n","xo,yo = zip(*err_rate)\n","plt.plot(xo,yo, label = \"Random Forest Classifier\")\n","plt.title(\"OOB Errors and Number of Trees\")\n","plt.xlabel(\"Number of trees\")\n","plt.ylabel(\"OOB error\")\n","plt.savefig(\"/content/drive/MyDrive/UBDC_2021/Final/idealtrees.pdf\",bbox_inches = \"tight\")\n","plt.show()\n","\n","\n"],"execution_count":8,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"RbULj6Hc1RhG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625347260630,"user_tz":240,"elapsed":314051,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"d7d48b6a-bd0f-41a4-c902-0c55995a31b7"},"source":["#Random Forest\n","real = Y_train[Y_train==0].shape[0]\n","fake = Y_train[Y_train==1].shape[0]\n","total = real + fake\n","weight_0 = (1/real)*(total/2.0)\n","weight_1 = (1/fake)*(total/2.0)\n","class_weight = {0:weight_0, 1:weight_1}\n","print(f\"Weight 0 clas is {weight_0}\")\n","print(f\"Weight 1 class is {weight_1}\")\n","\n","\n","modelrf = RandomForestClassifier(n_estimators=60, random_state=0, class_weight=class_weight) \n","modelrf.fit(X_train, Y_train)\n","modelrf_predictions = modelrf.predict(X_test)\n","\n","\n","#print values\n","print(\"\\n---------Random Forest Classifiers---------\")\n","print(\"\\nConfusion matrix: \\n\", confusion_matrix(Y_test,modelrf_predictions))\n","print(\"\\nClassification Report: \\n\", classification_report(Y_test,modelrf_predictions))\n","print(\"\\nClassification accuracy: \" ,accuracy_score(Y_test, modelrf_predictions) * 100, \"%.\\n\")\n"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Weight 0 clas is 0.525165047806951\n","Weight 1 class is 10.434413871089331\n","\n","---------Random Forest Classifiers---------\n","\n","Confusion matrix: \n"," [[52698    52]\n"," [  798  1818]]\n","\n","Classification Report: \n","               precision    recall  f1-score   support\n","\n","           0       0.99      1.00      0.99     52750\n","           1       0.97      0.69      0.81      2616\n","\n","    accuracy                           0.98     55366\n","   macro avg       0.98      0.85      0.90     55366\n","weighted avg       0.98      0.98      0.98     55366\n","\n","\n","Classification accuracy:  98.46476176714951 %.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"v_G90qiNvY6L","executionInfo":{"status":"ok","timestamp":1625347261270,"user_tz":240,"elapsed":661,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}}},"source":["import seaborn as sns"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":621},"id":"-wdF5uL0kGAF","executionInfo":{"status":"ok","timestamp":1625347261271,"user_tz":240,"elapsed":15,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"c21f0776-0828-4a52-c4cb-e1908386d467"},"source":["importance_list = modelrf.feature_importances_\n","indices = np.argsort(importance_list)[::-1]\n","indices = indices[:20] # let's just look at top 20\n","\n","f, ax = plt.subplots(figsize = (5,10))\n","plt.title(\"Random Forest Variable Importance\")\n","sns.barplot(y=[feature_names[i] for i in indices], \n","            x = importance_list[indices], \n","            label = \"total\", color = \"r\")\n","ax.set(ylabel = \"Variable\", xlabel = \"Variable Importance\")\n","sns.despine(left = True, bottom = True)\n","plt.savefig(\"/content/drive/MyDrive/UBDC_2021/Final/variableimportance.pdf\", bbox_inches = \"tight\")"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"nc0pD9721MlU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625350268514,"user_tz":240,"elapsed":3007254,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"f51374cc-f7de-4e18-bea4-441646a9ee24"},"source":["#SVM\n","from sklearn import svm\n","from sklearn.svm import SVC\n","modelsvm = svm.SVC(C = 1.0, kernel = 'linear', degree = 3, gamma= 'auto' , class_weight = class_weight)\n","modelsvm.fit(X_train, Y_train)\n","modelsvm_predictions = modelsvm.predict(X_test)\n","\n","#print values\n","print(\"\\n---------Support Vector Machine---------\")\n","print(\"\\nConfusion matrix: \\n\", confusion_matrix(Y_test,modelsvm_predictions))\n","print(\"\\nClassification Report: \\n\", classification_report(Y_test,modelsvm_predictions))\n","print(\"\\nClassification accuracy: \" ,accuracy_score(Y_test, modelsvm_predictions) * 100, \"%.\\n\")\n","\n"],"execution_count":12,"outputs":[{"output_type":"stream","text":["\n","---------Support Vector Machine---------\n","\n","Confusion matrix: \n"," [[52347   403]\n"," [  408  2208]]\n","\n","Classification Report: \n","               precision    recall  f1-score   support\n","\n","           0       0.99      0.99      0.99     52750\n","           1       0.85      0.84      0.84      2616\n","\n","    accuracy                           0.99     55366\n","   macro avg       0.92      0.92      0.92     55366\n","weighted avg       0.99      0.99      0.99     55366\n","\n","\n","Classification accuracy:  98.53520210959795 %.\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"63tq_82oG_ZI"},"source":["TEST DATA: Kaggle -- first needs to preprocessed and then run"]},{"cell_type":"code","metadata":{"id":"l00XIFnYHKZV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625350282571,"user_tz":240,"elapsed":6,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"70189dc9-c30c-4759-a83b-1ed92491bbe4"},"source":["import pandas as pd\n","from google.colab import files, drive\n","\n","\n","test_final = pd.read_csv(\"/content/drive/MyDrive/UBDC_2021/Final/english_test_with_labels.csv\")\n","test_final = test_final.iloc[:,1:]\n","print(test_final.head())\n","label_change = lambda x: 1 if x == \"fake\" else 0\n","y = test_final.iloc[:,1]\n","test_final.iloc[:,1] = y.map(label_change)\n","print(test_final.head())"],"execution_count":19,"outputs":[{"output_type":"stream","text":["                                               tweet label\n","0  Our daily update is published. States reported...  real\n","1             Alfalfa is the only cure for COVID-19.  fake\n","2  President Trump Asked What He Would Do If He W...  fake\n","3  States reported 630 deaths. We are still seein...  real\n","4  This is the sixth time a global health emergen...  real\n","                                               tweet  label\n","0  Our daily update is published. States reported...      0\n","1             Alfalfa is the only cure for COVID-19.      1\n","2  President Trump Asked What He Would Do If He W...      1\n","3  States reported 630 deaths. We are still seein...      0\n","4  This is the sixth time a global health emergen...      0\n","                                               tweet label\n","0  Our daily update is published. States reported...  real\n","1             Alfalfa is the only cure for COVID-19.  fake\n","2  President Trump Asked What He Would Do If He W...  fake\n","3  States reported 630 deaths. We are still seein...  real\n","4  This is the sixth time a global health emergen...  real\n","                                               tweet  label\n","0  Our daily update is published. States reported...      0\n","1             Alfalfa is the only cure for COVID-19.      1\n","2  President Trump Asked What He Would Do If He W...      1\n","3  States reported 630 deaths. We are still seein...      0\n","4  This is the sixth time a global health emergen...      0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"m0cNlV4xHLGp","executionInfo":{"status":"ok","timestamp":1625350282572,"user_tz":240,"elapsed":5,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}}},"source":["import re\n","\n","def cleaning_words2(phrase):\n","  tweet = re.sub(r\"http\\S+\", \"\", phrase) # remove all URLs\n","  tweet = re.sub('[^a-zA-z]',' ',tweet) # remove punctuation\n","  tweet = re.sub(r'@\\S+|https?://\\S+','', tweet) # remove @ sign\n","  tweet = tweet.lower() # make all letters lower case\n","  #tweet = tweet.split() # make a list of the words\n","\n","  # now will stem words \n","  # ps = PorterStemmer()\n","  # all_stopwords = stopwords.words(\"english\")\n","  # all_stopwords.remove(\"not\") # make sure we don't remove the word \"not\" since that changes the meaning of the sentence\n","  # tweet = [ps.stem(t) for t in tweet if not t in set(all_stopwords)]\n","  # tweet = \" \".join(tweet) # join the words back together\n","  cleaned_words = []\n","  cleaned_words.append(tweet)\n","  return tweet"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"rGuN-X3iHQFf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625350283483,"user_tz":240,"elapsed":916,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"078fab53-c9c5-4625-84be-e677c87012e8"},"source":["X_test_final = test_final.iloc[:,0]\n","y_test_final = test_final.iloc[:,1]\n","print(X_test_final[:3])\n","print(y_test_final[:3])\n","\n","\n","from sklearn.feature_extraction.text import CountVectorizer\n","\n","# clean & transform\n","X_test_final= X_test_final.map(cleaning_words2)\n","X_test_final = vectorizer.transform(X_test_final)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["0    Our daily update is published. States reported...\n","1               Alfalfa is the only cure for COVID-19.\n","2    President Trump Asked What He Would Do If He W...\n","Name: tweet, dtype: object\n","0    0\n","1    1\n","2    1\n","Name: label, dtype: int64\n","0    Our daily update is published. States reported...\n","1               Alfalfa is the only cure for COVID-19.\n","2    President Trump Asked What He Would Do If He W...\n","Name: tweet, dtype: object\n","0    0\n","1    1\n","2    1\n","Name: label, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xtIdhhC1HeQ2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625350288375,"user_tz":240,"elapsed":4895,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"62714018-7550-404f-96c9-5a2d82f9157a"},"source":["#SVM test results\n","y_test_final_pred = modelsvm.predict(X_test_final)\n","print(classification_report(y_test_final, y_test_final_pred))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.55      0.99      0.71      1120\n","           1       0.89      0.11      0.20      1020\n","\n","    accuracy                           0.57      2140\n","   macro avg       0.72      0.55      0.45      2140\n","weighted avg       0.71      0.57      0.46      2140\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.55      0.99      0.71      1120\n","           1       0.89      0.11      0.20      1020\n","\n","    accuracy                           0.57      2140\n","   macro avg       0.72      0.55      0.45      2140\n","weighted avg       0.71      0.57      0.46      2140\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eBwEkP8hHojU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625350295899,"user_tz":240,"elapsed":7533,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"9f20488d-a426-448f-d41e-806cf137ad6a"},"source":["#KNN test results\n","y_test_final_pred = model.predict(X_test_final)\n","print(classification_report(y_test_final, y_test_final_pred))"],"execution_count":23,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.53      1.00      0.69      1120\n","           1       0.85      0.02      0.04      1020\n","\n","    accuracy                           0.53      2140\n","   macro avg       0.69      0.51      0.37      2140\n","weighted avg       0.68      0.53      0.38      2140\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.53      1.00      0.69      1120\n","           1       0.85      0.02      0.04      1020\n","\n","    accuracy                           0.53      2140\n","   macro avg       0.69      0.51      0.37      2140\n","weighted avg       0.68      0.53      0.38      2140\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dyEw9XuzHtgc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625350295899,"user_tz":240,"elapsed":15,"user":{"displayName":"Titomi Adebajo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5Y0l-yq4IzxlQbIAoLo7XgQGGe25Oe7BWvrY1Ig=s64","userId":"10787206470624102626"}},"outputId":"c2fe8eac-fd02-4150-fffb-7baaebda19b9"},"source":["#RF test results\n","y_test_final_pred = modelrf.predict(X_test_final)\n","print(classification_report(y_test_final, y_test_final_pred))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.53      1.00      0.69      1120\n","           1       1.00      0.02      0.03      1020\n","\n","    accuracy                           0.53      2140\n","   macro avg       0.76      0.51      0.36      2140\n","weighted avg       0.75      0.53      0.38      2140\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.53      1.00      0.69      1120\n","           1       1.00      0.02      0.03      1020\n","\n","    accuracy                           0.53      2140\n","   macro avg       0.76      0.51      0.36      2140\n","weighted avg       0.75      0.53      0.38      2140\n","\n"],"name":"stdout"}]}]}